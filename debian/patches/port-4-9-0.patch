--- a/hfi1/file_ops.c
+++ b/hfi1/file_ops.c
@@ -73,8 +73,7 @@
  */
 static int hfi1_file_open(struct inode *inode, struct file *fp);
 static int hfi1_file_close(struct inode *inode, struct file *fp);
-static ssize_t hfi1_aio_write(struct kiocb *kiocb, const struct iovec *iovec,
-			      unsigned long dim, loff_t offset);
+static ssize_t hfi1_write_iter(struct kiocb *, struct iov_iter *);
 static unsigned int hfi1_poll(struct file *fp, struct poll_table_struct *pt);
 static int hfi1_file_mmap(struct file *fp, struct vm_area_struct *vma);
 
@@ -112,7 +111,7 @@
 
 static const struct file_operations hfi1_file_ops = {
 	.owner = THIS_MODULE,
-	.aio_write = hfi1_aio_write,
+	.write_iter = hfi1_write_iter,
 	.open = hfi1_file_open,
 	.release = hfi1_file_close,
 	.unlocked_ioctl = hfi1_file_ioctl,
@@ -417,13 +416,13 @@
 	return ret;
 }
 
-static ssize_t hfi1_aio_write(struct kiocb *kiocb, const struct iovec *iovec,
-			      unsigned long dim, loff_t offset)
+static ssize_t hfi1_write_iter(struct kiocb *kiocb, struct iov_iter *from)
 {
 	struct hfi1_filedata *fd = kiocb->ki_filp->private_data;
 	struct hfi1_user_sdma_pkt_q *pq = fd->pq;
 	struct hfi1_user_sdma_comp_q *cq = fd->cq;
 	int done = 0, reqs = 0;
+	unsigned long dim = from->nr_segs;
 
 	if (!cq || !pq)
 		return -EIO;
@@ -442,7 +441,7 @@
 		unsigned long count = 0;
 
 		ret = hfi1_user_sdma_process_request(
-			fd, (struct iovec *)(iovec + done),
+			kiocb->ki_filp,	(struct iovec *)(from->iov + done),
 			dim, &count);
 		if (ret) {
 			reqs = ret;
--- a/hfi1/user_sdma.c
+++ b/hfi1/user_sdma.c
@@ -111,6 +111,13 @@
 #define TXREQ_FLAGS_REQ_ACK   BIT(0)      /* Set the ACK bit in the header */
 #define TXREQ_FLAGS_REQ_DISABLE_SH BIT(1) /* Disable header suppression */
 
+/* SDMA request flag bits */
+#define SDMA_REQ_FOR_THREAD 1
+#define SDMA_REQ_SEND_DONE  2
+#define SDMA_REQ_HAVE_AHG   3
+#define SDMA_REQ_HAS_ERROR  4
+#define SDMA_REQ_DONE_ERROR 5
+
 #define SDMA_PKT_Q_INACTIVE BIT(0)
 #define SDMA_PKT_Q_ACTIVE   BIT(1)
 #define SDMA_PKT_Q_DEFERRED BIT(2)
@@ -211,6 +218,7 @@
 	u8 iov_idx;
 	u8 done;
 	u8 has_error;
+	unsigned long flags;
 
 	struct user_sdma_iovec iovs[MAX_VECTORS_PER_REQ];
 } ____cacheline_aligned_in_smp;
@@ -485,11 +493,11 @@
 	return mapping[hash];
 }
 
-int hfi1_user_sdma_process_request(struct hfi1_filedata *fd,
-				   struct iovec *iovec, unsigned long dim,
-				   unsigned long *count)
+int hfi1_user_sdma_process_request(struct file *fp, struct iovec *iovec,
+				   unsigned long dim, unsigned long *count)
 {
 	int ret = 0, i;
+	struct hfi1_filedata *fd = fp->private_data;
 	struct hfi1_ctxtdata *uctxt = fd->uctxt;
 	struct hfi1_user_sdma_pkt_q *pq = fd->pq;
 	struct hfi1_user_sdma_comp_q *cq = fd->cq;
@@ -560,20 +568,12 @@
 	hfi1_cdbg(SDMA, "[%u:%u:%u] Using req/comp entry %u\n", dd->unit,
 		  uctxt->ctxt, fd->subctxt, info.comp_idx);
 	req = pq->reqs + info.comp_idx;
+	memset(req, 0, sizeof(*req));
 	req->data_iovs = req_iovcnt(info.ctrl) - 1; /* subtract header vector */
-	req->data_len  = 0;
 	req->pq = pq;
 	req->cq = cq;
 	req->status = -1;
 	req->ahg_idx = -1;
-	req->iov_idx = 0;
-	req->sent = 0;
-	req->seqnum = 0;
-	req->seqcomp = 0;
-	req->seqsubmitted = 0;
-	req->tids = NULL;
-	req->done = 0;
-	req->has_error = 0;
 	INIT_LIST_HEAD(&req->txps);
 
 	memcpy(&req->info, &info, sizeof(info));
@@ -725,8 +725,14 @@
 	}
 
 	/* We don't need an AHG entry if the request contains only one packet */
-	if (req->info.npkts > 1 && HFI1_CAP_IS_USET(SDMA_AHG))
-		req->ahg_idx = sdma_ahg_alloc(req->sde);
+	if (req->info.npkts > 1 && HFI1_CAP_IS_USET(SDMA_AHG)) {
+		int ahg = sdma_ahg_alloc(req->sde);
+
+		if (likely(ahg >= 0)) {
+			req->ahg_idx = (u8)ahg;
+			set_bit(SDMA_REQ_HAVE_AHG, &req->flags);
+		}
+	}
 
 	set_comp_state(pq, cq, info.comp_idx, QUEUED, 0);
 	atomic_inc(&pq->n_reqs);
@@ -753,12 +759,12 @@
 	 * request have been submitted to the SDMA engine. However, it
 	 * will not wait for send completions.
 	 */
-	while (req->seqsubmitted != req->info.npkts) {
+	while (!test_bit(SDMA_REQ_SEND_DONE, &req->flags)) {
 		ret = user_sdma_send_pkts(req, pcount);
 		if (ret < 0) {
 			if (ret != -EBUSY) {
 				req->status = ret;
-				WRITE_ONCE(req->has_error, 1);
+				set_bit(SDMA_REQ_DONE_ERROR, &req->flags);
 				if (ACCESS_ONCE(req->seqcomp) ==
 				    req->seqsubmitted - 1)
 					goto free_req;
@@ -860,8 +866,10 @@
 	pq = req->pq;
 
 	/* If tx completion has reported an error, we are done. */
-	if (READ_ONCE(req->has_error))
+	if (test_bit(SDMA_REQ_HAS_ERROR, &req->flags)) {
+		set_bit(SDMA_REQ_DONE_ERROR, &req->flags);
 		return -EFAULT;
+	}
 
 	/*
 	 * Check if we might have sent the entire request already
@@ -884,8 +892,10 @@
 		 * with errors. If so, we are not going to process any
 		 * more packets from this request.
 		 */
-		if (READ_ONCE(req->has_error))
+		if (test_bit(SDMA_REQ_HAS_ERROR, &req->flags)) {
+			set_bit(SDMA_REQ_DONE_ERROR, &req->flags);
 			return -EFAULT;
+		}
 
 		tx = kmem_cache_alloc(pq->txreq_cache, GFP_KERNEL);
 		if (!tx)
@@ -940,7 +950,7 @@
 			}
 		}
 
-		if (req->ahg_idx >= 0) {
+		if (test_bit(SDMA_REQ_HAVE_AHG, &req->flags)) {
 			if (!req->seqnum) {
 				u16 pbclen = le16_to_cpu(req->hdr.pbc[0]);
 				u32 lrhlen = get_lrh_len(req->hdr,
@@ -1060,14 +1070,14 @@
 			       &req->txps, &count);
 	req->seqsubmitted += count;
 	if (req->seqsubmitted == req->info.npkts) {
-		WRITE_ONCE(req->done, 1);
+		set_bit(SDMA_REQ_SEND_DONE, &req->flags);
 		/*
 		 * The txreq has already been submitted to the HW queue
 		 * so we can free the AHG entry now. Corruption will not
 		 * happen due to the sequential manner in which
 		 * descriptors are processed.
 		 */
-		if (req->ahg_idx >= 0)
+		if (test_bit(SDMA_REQ_HAVE_AHG, &req->flags))
 			sdma_ahg_free(req->sde, req->ahg_idx);
 	}
 	return ret;
@@ -1509,7 +1519,7 @@
 	if (status != SDMA_TXREQ_S_OK) {
 		SDMA_DBG(req, "SDMA completion with error %d",
 			 status);
-		WRITE_ONCE(req->has_error, 1);
+		set_bit(SDMA_REQ_HAS_ERROR, &req->flags);
 	}
 
 	req->seqcomp = tx->seqnum;
@@ -1528,8 +1538,8 @@
 		if (status != SDMA_TXREQ_S_OK)
 			req->status = status;
 		if (req->seqcomp == (ACCESS_ONCE(req->seqsubmitted) - 1) &&
-		    (READ_ONCE(req->done) ||
-		     READ_ONCE(req->has_error))) {
+		    (test_bit(SDMA_REQ_SEND_DONE, &req->flags) ||
+		     test_bit(SDMA_REQ_DONE_ERROR, &req->flags))) {
 			user_sdma_free_request(req, false);
 			pq_update(pq);
 			set_comp_state(pq, cq, idx, ERROR, req->status);
--- a/hfi1/user_sdma.h
+++ b/hfi1/user_sdma.h
@@ -128,8 +128,7 @@
 				struct hfi1_filedata *fd);
 int hfi1_user_sdma_free_queues(struct hfi1_filedata *fd,
 			       struct hfi1_ctxtdata *uctxt);
-int hfi1_user_sdma_process_request(struct hfi1_filedata *fd,
-				   struct iovec *iovec, unsigned long dim,
-				   unsigned long *count);
+int hfi1_user_sdma_process_request(struct file *, struct iovec *, unsigned long,
+				   unsigned long *);
 
 #endif /* _HFI1_USER_SDMA_H */
--- a/hfi1/init.c
+++ b/hfi1/init.c
@@ -1953,7 +1953,7 @@
 	 * heavy filesystem activity makes these fail, and we can
 	 * use compound pages.
 	 */
-	gfp_flags = __GFP_WAIT | __GFP_IO | __GFP_COMP;
+	gfp_flags = __GFP_RECLAIM | __GFP_IO | __GFP_COMP;
 
 	/*
 	 * The minimum size of the eager buffers is a groups of MTU-sized
--- a/hfi1/sdma.c
+++ b/hfi1/sdma.c
@@ -1083,14 +1083,11 @@
 
 ssize_t sdma_get_cpu_to_sde_map(struct sdma_engine *sde, char *buf)
 {
-	int n;
 	mutex_lock(&process_to_sde_mutex);
 	if (cpumask_empty(&sde->cpu_mask))
 		snprintf(buf, PAGE_SIZE, "%s\n", "empty");
 	else {
-		n = cpulist_scnprintf(buf, PAGE_SIZE - 2, &sde->cpu_mask);
-		buf[n++] = '\n';
-		buf[n] = '\0';
+		cpumap_print_to_pagebuf(true, buf, &sde->cpu_mask);
 	}
 	mutex_unlock(&process_to_sde_mutex);
 	return strnlen(buf, PAGE_SIZE);
--- a/hfi1/debugfs.c
+++ b/hfi1/debugfs.c
@@ -61,55 +61,10 @@
 #include "qp.h"
 #include "sdma.h"
 
-static struct dentry *hfi1_dbg_root;
-
 extern struct srcu_struct debugfs_srcu;
 DEFINE_SRCU(debugfs_srcu);
 
-/**
- * debugfs_use_file_start - mark the beginning of file data access
- * @dentry: the dentry object whose data is being accessed.
- * @srcu_idx: a pointer to some memory to store a SRCU index in.
- *
- * Up to a matching call to debugfs_use_file_finish(), any
- * successive call into the file removing functions debugfs_remove()
- * and debugfs_remove_recursive() will block. Since associated private
- * file data may only get freed after a successful return of any of
- * the removal functions, you may safely access it after a successful
- * call to debugfs_use_file_start() without worrying about
- * lifetime issues.
- *
- * If -%EIO is returned, the file has already been removed and thus,
- * it is not safe to access any of its data. If, on the other hand,
- * it is allowed to access the file data, zero is returned.
- *
- * Regardless of the return code, any call to
- * debugfs_use_file_start() must be followed by a matching call
- * to debugfs_use_file_finish().
- */
-static int debugfs_use_file_start(struct dentry *dentry, int *srcu_idx)
-        __acquires(&debugfs_srcu)
-{
-        *srcu_idx = srcu_read_lock(&debugfs_srcu);
-        barrier();
-        if (d_unlinked(dentry))
-                return -EIO;
-        return 0;
-}
-
-/**
- * debugfs_use_file_finish - mark the end of file data access
- * @srcu_idx: the SRCU index "created" by a former call to
- *            debugfs_use_file_start().
- *
- * Allow any ongoing concurrent call into debugfs_remove() or
- * debugfs_remove_recursive() blocked by a former call to
- * debugfs_use_file_start() to proceed and return to its caller.
- */
-static void debugfs_use_file_finish(int srcu_idx) __releases(&debugfs_srcu)
-{
-        srcu_read_unlock(&debugfs_srcu, srcu_idx);
-}
+static struct dentry *hfi1_dbg_root;
 
 /* wrappers to enforce srcu in seq file */
 static ssize_t hfi1_seq_read(
--- a/include/rdma/opa_port_info.h
+++ /dev/null
@@ -1,417 +0,0 @@
-/*
- * Copyright (c) 2014 Intel Corporation.  All rights reserved.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-
-#if !defined(OPA_PORT_INFO_H)
-#define OPA_PORT_INFO_H
-
-#define OPA_PORT_LINK_MODE_NOP	0		/* No change */
-#define OPA_PORT_LINK_MODE_OPA	4		/* Port mode is OPA */
-
-#define OPA_PORT_PACKET_FORMAT_NOP	0		/* No change */
-#define OPA_PORT_PACKET_FORMAT_8B	1		/* Format 8B */
-#define OPA_PORT_PACKET_FORMAT_9B	2		/* Format 9B */
-#define OPA_PORT_PACKET_FORMAT_10B	4		/* Format 10B */
-#define OPA_PORT_PACKET_FORMAT_16B	8		/* Format 16B */
-
-#define OPA_PORT_LTP_CRC_MODE_NONE	0	/* No change */
-#define OPA_PORT_LTP_CRC_MODE_14	1	/* 14-bit LTP CRC mode (optional) */
-#define OPA_PORT_LTP_CRC_MODE_16	2	/* 16-bit LTP CRC mode */
-#define OPA_PORT_LTP_CRC_MODE_48	4	/* 48-bit LTP CRC mode (optional) */
-#define OPA_PORT_LTP_CRC_MODE_PER_LANE  8	/* 12/16-bit per lane LTP CRC mode */
-
-/* Link Down / Neighbor Link Down Reason; indicated as follows: */
-#define OPA_LINKDOWN_REASON_NONE				0	/* No specified reason */
-#define OPA_LINKDOWN_REASON_RCV_ERROR_0				1
-#define OPA_LINKDOWN_REASON_BAD_PKT_LEN				2
-#define OPA_LINKDOWN_REASON_PKT_TOO_LONG			3
-#define OPA_LINKDOWN_REASON_PKT_TOO_SHORT			4
-#define OPA_LINKDOWN_REASON_BAD_SLID				5
-#define OPA_LINKDOWN_REASON_BAD_DLID				6
-#define OPA_LINKDOWN_REASON_BAD_L2				7
-#define OPA_LINKDOWN_REASON_BAD_SC				8
-#define OPA_LINKDOWN_REASON_RCV_ERROR_8				9
-#define OPA_LINKDOWN_REASON_BAD_MID_TAIL			10
-#define OPA_LINKDOWN_REASON_RCV_ERROR_10			11
-#define OPA_LINKDOWN_REASON_PREEMPT_ERROR			12
-#define OPA_LINKDOWN_REASON_PREEMPT_VL15			13
-#define OPA_LINKDOWN_REASON_BAD_VL_MARKER			14
-#define OPA_LINKDOWN_REASON_RCV_ERROR_14			15
-#define OPA_LINKDOWN_REASON_RCV_ERROR_15			16
-#define OPA_LINKDOWN_REASON_BAD_HEAD_DIST			17
-#define OPA_LINKDOWN_REASON_BAD_TAIL_DIST			18
-#define OPA_LINKDOWN_REASON_BAD_CTRL_DIST			19
-#define OPA_LINKDOWN_REASON_BAD_CREDIT_ACK			20
-#define OPA_LINKDOWN_REASON_UNSUPPORTED_VL_MARKER		21
-#define OPA_LINKDOWN_REASON_BAD_PREEMPT				22
-#define OPA_LINKDOWN_REASON_BAD_CONTROL_FLIT			23
-#define OPA_LINKDOWN_REASON_EXCEED_MULTICAST_LIMIT		24
-#define OPA_LINKDOWN_REASON_RCV_ERROR_24			25
-#define OPA_LINKDOWN_REASON_RCV_ERROR_25			26
-#define OPA_LINKDOWN_REASON_RCV_ERROR_26			27
-#define OPA_LINKDOWN_REASON_RCV_ERROR_27			28
-#define OPA_LINKDOWN_REASON_RCV_ERROR_28			29
-#define OPA_LINKDOWN_REASON_RCV_ERROR_29			30
-#define OPA_LINKDOWN_REASON_RCV_ERROR_30			31
-#define OPA_LINKDOWN_REASON_EXCESSIVE_BUFFER_OVERRUN		32
-#define OPA_LINKDOWN_REASON_UNKNOWN				33
-/* 34 -reserved */
-#define OPA_LINKDOWN_REASON_REBOOT				35
-#define OPA_LINKDOWN_REASON_NEIGHBOR_UNKNOWN			36
-/* 37-38 reserved */
-#define OPA_LINKDOWN_REASON_FM_BOUNCE				39
-#define OPA_LINKDOWN_REASON_SPEED_POLICY			40
-#define OPA_LINKDOWN_REASON_WIDTH_POLICY			41
-/* 42-48 reserved */
-#define OPA_LINKDOWN_REASON_DISCONNECTED			49
-#define OPA_LINKDOWN_REASON_LOCAL_MEDIA_NOT_INSTALLED		50
-#define OPA_LINKDOWN_REASON_NOT_INSTALLED			51
-#define OPA_LINKDOWN_REASON_CHASSIS_CONFIG			52
-/* 53 reserved */
-#define OPA_LINKDOWN_REASON_END_TO_END_NOT_INSTALLED		54
-/* 55 reserved */
-#define OPA_LINKDOWN_REASON_POWER_POLICY			56
-#define OPA_LINKDOWN_REASON_LINKSPEED_POLICY			57
-#define OPA_LINKDOWN_REASON_LINKWIDTH_POLICY			58
-/* 59 reserved */
-#define OPA_LINKDOWN_REASON_SWITCH_MGMT				60
-#define OPA_LINKDOWN_REASON_SMA_DISABLED			61
-/* 62 reserved */
-#define OPA_LINKDOWN_REASON_TRANSIENT				63
-/* 64-255 reserved */
-
-/* OPA Link Init reason; indicated as follows: */
-/* 3-7; 11-15 reserved; 8-15 cleared on Polling->LinkUp */
-#define OPA_LINKINIT_REASON_NOP                 0
-#define OPA_LINKINIT_REASON_LINKUP              (1 << 4)
-#define OPA_LINKINIT_REASON_FLAPPING            (2 << 4)
-#define OPA_LINKINIT_REASON_CLEAR               (8 << 4)
-#define OPA_LINKINIT_OUTSIDE_POLICY             (8 << 4)
-#define OPA_LINKINIT_QUARANTINED                (9 << 4)
-#define OPA_LINKINIT_INSUFIC_CAPABILITY         (10 << 4)
-
-#define OPA_LINK_SPEED_NOP              0x0000  /*  Reserved (1-5 Gbps) */
-#define OPA_LINK_SPEED_12_5G            0x0001  /*  12.5 Gbps */
-#define OPA_LINK_SPEED_25G              0x0002  /*  25.78125?  Gbps (EDR) */
-
-#define OPA_LINK_WIDTH_1X            0x0001
-#define OPA_LINK_WIDTH_2X            0x0002
-#define OPA_LINK_WIDTH_3X            0x0004
-#define OPA_LINK_WIDTH_4X            0x0008
-
-#define OPA_CAP_MASK3_IsSnoopSupported            (1 << 7)
-#define OPA_CAP_MASK3_IsAsyncSC2VLSupported       (1 << 6)
-#define OPA_CAP_MASK3_IsAddrRangeConfigSupported  (1 << 5)
-#define OPA_CAP_MASK3_IsPassThroughSupported      (1 << 4)
-#define OPA_CAP_MASK3_IsSharedSpaceSupported      (1 << 3)
-/* reserved (1 << 2) */
-#define OPA_CAP_MASK3_IsVLMarkerSupported         (1 << 1)
-#define OPA_CAP_MASK3_IsVLrSupported              (1 << 0)
-
-/**
- * new MTU values
- */
-enum {
-	OPA_MTU_8192  = 6,
-	OPA_MTU_10240 = 7,
-};
-
-enum {
-	OPA_PORT_PHYS_CONF_DISCONNECTED = 0,
-	OPA_PORT_PHYS_CONF_STANDARD     = 1,
-	OPA_PORT_PHYS_CONF_FIXED        = 2,
-	OPA_PORT_PHYS_CONF_VARIABLE     = 3,
-	OPA_PORT_PHYS_CONF_SI_PHOTO     = 4
-};
-
-enum port_info_field_masks {
-	/* vl.cap */
-	OPA_PI_MASK_VL_CAP                        = 0x1F,
-	/* port_states.ledenable_offlinereason */
-	OPA_PI_MASK_OFFLINE_REASON                = 0x0F,
-	OPA_PI_MASK_LED_ENABLE                    = 0x40,
-	/* port_states.unsleepstate_downdefstate */
-	OPA_PI_MASK_UNSLEEP_STATE                 = 0xF0,
-	OPA_PI_MASK_DOWNDEF_STATE                 = 0x0F,
-	/* port_states.portphysstate_portstate */
-	OPA_PI_MASK_PORT_PHYSICAL_STATE           = 0xF0,
-	OPA_PI_MASK_PORT_STATE                    = 0x0F,
-	/* port_phys_conf */
-	OPA_PI_MASK_PORT_PHYSICAL_CONF            = 0x0F,
-	/* collectivemask_multicastmask */
-	OPA_PI_MASK_COLLECT_MASK                  = 0x38,
-	OPA_PI_MASK_MULTICAST_MASK                = 0x07,
-	/* mkeyprotect_lmc */
-	OPA_PI_MASK_MKEY_PROT_BIT                 = 0xC0,
-	OPA_PI_MASK_LMC                           = 0x0F,
-	/* smsl */
-	OPA_PI_MASK_SMSL                          = 0x1F,
-	/* partenforce_filterraw */
-	/* Filter Raw In/Out bits 1 and 2 were removed */
-	OPA_PI_MASK_LINKINIT_REASON               = 0xF0,
-	OPA_PI_MASK_PARTITION_ENFORCE_IN          = 0x08,
-	OPA_PI_MASK_PARTITION_ENFORCE_OUT         = 0x04,
-	/* operational_vls */
-	OPA_PI_MASK_OPERATIONAL_VL                = 0x1F,
-	/* sa_qp */
-	OPA_PI_MASK_SA_QP                         = 0x00FFFFFF,
-	/* sm_trap_qp */
-	OPA_PI_MASK_SM_TRAP_QP                    = 0x00FFFFFF,
-	/* localphy_overrun_errors */
-	OPA_PI_MASK_LOCAL_PHY_ERRORS              = 0xF0,
-	OPA_PI_MASK_OVERRUN_ERRORS                = 0x0F,
-	/* clientrereg_subnettimeout */
-	OPA_PI_MASK_CLIENT_REREGISTER             = 0x80,
-	OPA_PI_MASK_SUBNET_TIMEOUT                = 0x1F,
-	/* port_link_mode */
-	OPA_PI_MASK_PORT_LINK_SUPPORTED           = (0x001F << 10),
-	OPA_PI_MASK_PORT_LINK_ENABLED             = (0x001F <<  5),
-	OPA_PI_MASK_PORT_LINK_ACTIVE              = (0x001F <<  0),
-	/* port_link_crc_mode */
-	OPA_PI_MASK_PORT_LINK_CRC_SUPPORTED       = 0x0F00,
-	OPA_PI_MASK_PORT_LINK_CRC_ENABLED         = 0x00F0,
-	OPA_PI_MASK_PORT_LINK_CRC_ACTIVE          = 0x000F,
-	/* port_mode */
-	OPA_PI_MASK_PORT_MODE_SECURITY_CHECK      = 0x0001,
-	OPA_PI_MASK_PORT_MODE_16B_TRAP_QUERY      = 0x0002,
-	OPA_PI_MASK_PORT_MODE_PKEY_CONVERT        = 0x0004,
-	OPA_PI_MASK_PORT_MODE_SC2SC_MAPPING       = 0x0008,
-	OPA_PI_MASK_PORT_MODE_VL_MARKER           = 0x0010,
-	OPA_PI_MASK_PORT_PASS_THROUGH             = 0x0020,
-	OPA_PI_MASK_PORT_ACTIVE_OPTOMIZE          = 0x0040,
-	/* flit_control.interleave */
-	OPA_PI_MASK_INTERLEAVE_DIST_SUP           = (0x0003 << 12),
-	OPA_PI_MASK_INTERLEAVE_DIST_ENABLE        = (0x0003 << 10),
-	OPA_PI_MASK_INTERLEAVE_MAX_NEST_TX        = (0x001F <<  5),
-	OPA_PI_MASK_INTERLEAVE_MAX_NEST_RX        = (0x001F <<  0),
-
-	/* port_error_action */
-	OPA_PI_MASK_EX_BUFFER_OVERRUN                  = 0x80000000,
-		/* 7 bits reserved */
-	OPA_PI_MASK_FM_CFG_ERR_EXCEED_MULTICAST_LIMIT  = 0x00800000,
-	OPA_PI_MASK_FM_CFG_BAD_CONTROL_FLIT            = 0x00400000,
-	OPA_PI_MASK_FM_CFG_BAD_PREEMPT                 = 0x00200000,
-	OPA_PI_MASK_FM_CFG_UNSUPPORTED_VL_MARKER       = 0x00100000,
-	OPA_PI_MASK_FM_CFG_BAD_CRDT_ACK                = 0x00080000,
-	OPA_PI_MASK_FM_CFG_BAD_CTRL_DIST               = 0x00040000,
-	OPA_PI_MASK_FM_CFG_BAD_TAIL_DIST               = 0x00020000,
-	OPA_PI_MASK_FM_CFG_BAD_HEAD_DIST               = 0x00010000,
-		/* 2 bits reserved */
-	OPA_PI_MASK_PORT_RCV_BAD_VL_MARKER             = 0x00002000,
-	OPA_PI_MASK_PORT_RCV_PREEMPT_VL15              = 0x00001000,
-	OPA_PI_MASK_PORT_RCV_PREEMPT_ERROR             = 0x00000800,
-		/* 1 bit reserved */
-	OPA_PI_MASK_PORT_RCV_BAD_MidTail               = 0x00000200,
-		/* 1 bit reserved */
-	OPA_PI_MASK_PORT_RCV_BAD_SC                    = 0x00000080,
-	OPA_PI_MASK_PORT_RCV_BAD_L2                    = 0x00000040,
-	OPA_PI_MASK_PORT_RCV_BAD_DLID                  = 0x00000020,
-	OPA_PI_MASK_PORT_RCV_BAD_SLID                  = 0x00000010,
-	OPA_PI_MASK_PORT_RCV_PKTLEN_TOOSHORT           = 0x00000008,
-	OPA_PI_MASK_PORT_RCV_PKTLEN_TOOLONG            = 0x00000004,
-	OPA_PI_MASK_PORT_RCV_BAD_PKTLEN                = 0x00000002,
-	OPA_PI_MASK_PORT_RCV_BAD_LT                    = 0x00000001,
-
-	/* pass_through.res_drctl */
-	OPA_PI_MASK_PASS_THROUGH_DR_CONTROL       = 0x01,
-
-	/* buffer_units */
-	OPA_PI_MASK_BUF_UNIT_VL15_INIT            = (0x00000FFF  << 11),
-	OPA_PI_MASK_BUF_UNIT_VL15_CREDIT_RATE     = (0x0000001F  <<  6),
-	OPA_PI_MASK_BUF_UNIT_CREDIT_ACK           = (0x00000003  <<  3),
-	OPA_PI_MASK_BUF_UNIT_BUF_ALLOC            = (0x00000003  <<  0),
-
-	/* neigh_mtu.pvlx_to_mtu */
-	OPA_PI_MASK_NEIGH_MTU_PVL0                = 0xF0,
-	OPA_PI_MASK_NEIGH_MTU_PVL1                = 0x0F,
-
-	/* neigh_mtu.vlstall_hoq_life */
-	OPA_PI_MASK_VL_STALL                      = (0x03 << 5),
-	OPA_PI_MASK_HOQ_LIFE                      = (0x1F << 0),
-
-	/* port_neigh_mode */
-	OPA_PI_MASK_NEIGH_MGMT_ALLOWED            = (0x01 << 3),
-	OPA_PI_MASK_NEIGH_FW_AUTH_BYPASS          = (0x01 << 2),
-	OPA_PI_MASK_NEIGH_NODE_TYPE               = (0x03 << 0),
-
-	/* resptime_value */
-	OPA_PI_MASK_RESPONSE_TIME_VALUE           = 0x1F,
-
-	/* mtucap */
-	OPA_PI_MASK_MTU_CAP                       = 0x0F,
-};
-
-struct opa_port_states {
-	u8     reserved;
-	u8     ledenable_offlinereason;   /* 1 res, 1 bit, 6 bits */
-	u8     reserved2;
-	u8     portphysstate_portstate;   /* 4 bits, 4 bits */
-};
-
-struct opa_port_state_info {
-	struct opa_port_states port_states;
-	__be16 link_width_downgrade_tx_active;
-	__be16 link_width_downgrade_rx_active;
-};
-
-struct opa_port_info {
-	__be32 lid;
-	__be32 flow_control_mask;
-
-	struct {
-		u8     res;                       /* was inittype */
-		u8     cap;                       /* 3 res, 5 bits */
-		__be16 high_limit;
-		__be16 preempt_limit;
-		u8     arb_high_cap;
-		u8     arb_low_cap;
-	} vl;
-
-	struct opa_port_states  port_states;
-	u8     port_phys_conf;                    /* 4 res, 4 bits */
-	u8     collectivemask_multicastmask;      /* 2 res, 3, 3 */
-	u8     mkeyprotect_lmc;                   /* 2 bits, 2 res, 4 bits */
-	u8     smsl;                              /* 3 res, 5 bits */
-
-	u8     partenforce_filterraw;             /* bit fields */
-	u8     operational_vls;                    /* 3 res, 5 bits */
-	__be16 pkey_8b;
-	__be16 pkey_10b;
-	__be16 mkey_violations;
-
-	__be16 pkey_violations;
-	__be16 qkey_violations;
-	__be32 sm_trap_qp;                        /* 8 bits, 24 bits */
-
-	__be32 sa_qp;                             /* 8 bits, 24 bits */
-	u8     neigh_port_num;
-	u8     link_down_reason;
-	u8     neigh_link_down_reason;
-	u8     clientrereg_subnettimeout;	  /* 1 bit, 2 bits, 5 */
-
-	struct {
-		__be16 supported;
-		__be16 enabled;
-		__be16 active;
-	} link_speed;
-	struct {
-		__be16 supported;
-		__be16 enabled;
-		__be16 active;
-	} link_width;
-	struct {
-		__be16 supported;
-		__be16 enabled;
-		__be16 tx_active;
-		__be16 rx_active;
-	} link_width_downgrade;
-	__be16 port_link_mode;                  /* 1 res, 5 bits, 5 bits, 5 bits */
-	__be16 port_ltp_crc_mode;               /* 4 res, 4 bits, 4 bits, 4 bits */
-
-	__be16 port_mode;                       /* 9 res, bit fields */
-	struct {
-		__be16 supported;
-		__be16 enabled;
-	} port_packet_format;
-	struct {
-		__be16 interleave;  /* 2 res, 2,2,5,5 */
-		struct {
-			__be16 min_initial;
-			__be16 min_tail;
-			u8     large_pkt_limit;
-			u8     small_pkt_limit;
-			u8     max_small_pkt_limit;
-			u8     preemption_limit;
-		} preemption;
-	} flit_control;
-
-	__be32 reserved4;
-	__be32 port_error_action; /* bit field */
-
-	struct {
-		u8 egress_port;
-		u8 res_drctl;                    /* 7 res, 1 */
-	} pass_through;
-	__be16 mkey_lease_period;
-	__be32 buffer_units;                     /* 9 res, 12, 5, 3, 3 */
-
-	__be32 reserved5;
-	__be32 sm_lid;
-
-	__be64 mkey;
-
-	__be64 subnet_prefix;
-
-	struct {
-		u8 pvlx_to_mtu[OPA_MAX_VLS/2]; /* 4 bits, 4 bits */
-	} neigh_mtu;
-
-	struct {
-		u8 vlstall_hoqlife;             /* 3 bits, 5 bits */
-	} xmit_q[OPA_MAX_VLS];
-
-	struct {
-		u8 addr[16];
-	} ipaddr_ipv6;
-
-	struct {
-		u8 addr[4];
-	} ipaddr_ipv4;
-
-	u32    reserved6;
-	u32    reserved7;
-	u32    reserved8;
-
-	__be64 neigh_node_guid;
-
-	__be32 ib_cap_mask;
-	__be16 reserved9;                    /* was ib_cap_mask2 */
-	__be16 opa_cap_mask;
-
-	__be32 reserved10;                   /* was link_roundtrip_latency */
-	__be16 overall_buffer_space;
-	__be16 reserved11;                   /* was max_credit_hint */
-
-	__be16 diag_code;
-	struct {
-		u8 buffer;
-		u8 wire;
-	} replay_depth;
-	u8     port_neigh_mode;
-	u8     mtucap;                          /* 4 res, 4 bits */
-
-	u8     resptimevalue;		        /* 3 res, 5 bits */
-	u8     local_port_num;
-	u8     reserved12;
-	u8     reserved13;                       /* was guid_cap */
-} __attribute__ ((packed));
-
-#endif /* OPA_PORT_INFO_H */
